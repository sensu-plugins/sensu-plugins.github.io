<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sensu Plugins</title>
    <description>The home for all Sensu Official and Community plugins, handlers, extensions and mutators.
</description>
    <link>http://sensu-plugins.github.io/</link>
    <atom:link href="http://sensu-plugins.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 27 Jan 2015 03:45:16 -0500</pubDate>
    <lastBuildDate>Tue, 27 Jan 2015 03:45:16 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Welcome to new Sensu Plugins!</title>
        <description>
</description>
        <pubDate>Mon, 26 Jan 2015 22:20:18 -0500</pubDate>
        <link>http://sensu-plugins.github.io/sensu-plugins/update/2015/01/26/welcome-to-sensu-plugins-new-home.html</link>
        <guid isPermaLink="true">http://sensu-plugins.github.io/sensu-plugins/update/2015/01/26/welcome-to-sensu-plugins-new-home.html</guid>
        
        
        <category>sensu-plugins</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Sensu Plugins Roadmap</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/sensu/sensu-community-plugins/issues/847&quot;&gt;Issue #847&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Packaging and versioning of the plugins is something I know a lot of people want and for good reason.  I would like to purpose a thought and see how people feel about it. In a nutshell I would like to split the community-plugins repo in smaller repos, based upon application.  This would mean all the Windows plugins, handlers, etc would go into a repo named &lt;strong&gt;sensu-plugins-windows&lt;/strong&gt;, the aws ones would go to &lt;strong&gt;sensu-plugins-aws&lt;/strong&gt; and so one. Some projects already do this to some extent, specifically Hubot, and it presents many advantages.&lt;/p&gt;

&lt;h2 id=&quot;pros&quot;&gt;Pros&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Application groups are easier to package and version than a monolithic repository&lt;/li&gt;
  &lt;li&gt;Plugin groups could be installed by an automation tool or Sensu itself with ease and be dependent upon only those checks currently running&lt;/li&gt;
  &lt;li&gt;There would be no need to bump the entire plugins repo for a small change to a single plugin&lt;/li&gt;
  &lt;li&gt;A user could pin separate gem versions depending on their environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cons&quot;&gt;Cons&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;More overhead concerning dependency management&lt;/li&gt;
  &lt;li&gt;More jobs to create and manage&lt;/li&gt;
  &lt;li&gt;Plugin groups may not work for everyone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those that want things the way they are we will create quarterly meta-gem releases of all the various gems, and these can be considered stable, whereas the individual gems could be considered production grade but active and the meta-gem would get built from each of these. This paves the way for company’s to create specific gemsets for only the software they run. For example a lamp stack meta-gem would consist of core(system), mysql, and apache.&lt;/p&gt;

&lt;p&gt;Dependency management could be somewhat solved over time as the community builds custom meta sets and such that all rely on a single dependency version, as they pin their version and run the included integration tests, if they pass then they could submit a PR back and we could bump the dependency for that specific gem.&lt;/p&gt;

&lt;h2 id=&quot;proposed-timeframe&quot;&gt;Proposed Timeframe&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;February (Creation)&lt;/li&gt;
  &lt;li&gt;Split all repos&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create gems for each repo as they currently stand&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;March - April (Transition Period)&lt;/li&gt;
  &lt;li&gt;Maintain both architectures&lt;/li&gt;
  &lt;li&gt;Accept pull requests from &lt;strong&gt;sensu-community-plugins&lt;/strong&gt; repo and new repos&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create build schedule and pipeline for new gems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;May (Start cutover)&lt;/li&gt;
  &lt;li&gt;Stop accepting PR’s and issues for &lt;strong&gt;sensu-community-plugins&lt;/strong&gt; repo for new functionality (bugs and security fixes still allowed)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maintain desired build schedule for all new gems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;June (End cutover)&lt;/li&gt;
  &lt;li&gt;Freeze &lt;strong&gt;sensu-community-plugins&lt;/strong&gt; repo and stop accepting all PR’s and Issues&lt;/li&gt;
  &lt;li&gt;Maintain desired build schedule for all new gems&lt;/li&gt;
  &lt;li&gt;Create first unstable release of meta-gem package&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 26 Jan 2015 22:20:18 -0500</pubDate>
        <link>http://sensu-plugins.github.io/sensu-plugins/issue/2015/01/26/sensu-plugins-roadmap.html</link>
        <guid isPermaLink="true">http://sensu-plugins.github.io/sensu-plugins/issue/2015/01/26/sensu-plugins-roadmap.html</guid>
        
        
        <category>sensu-plugins</category>
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Jan 2015 21:02:18 -0500</pubDate>
        <link>http://sensu-plugins.github.io/jekyll/update/2015/01/26/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://sensu-plugins.github.io/jekyll/update/2015/01/26/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
